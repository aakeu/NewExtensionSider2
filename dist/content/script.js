function toggleSidebar(){const e=document.getElementById("extension-sidebar");if(e)document.body.style.marginRight="0",e.remove();else{const t=400,s=`\n        <div id="extension-sidebar" style="position:fixed;top:0;right:0;width:${t}px;height:100%;background-color:#f1f1f1;z-index:1000;box-shadow:-2px 0 5px rgba(0,0,0,0.1);">\n          <div id="extension-sidebar-content" style="padding:10px;overflow-y:auto;height:100%;position:relative;">\n            <button id="close-sidebar" style="position:absolute;top:10px;right:10px;background-color:red;color:white;border:none;border-radius:3px;cursor:pointer;padding:5px;">X</button>\n            <h1 style="text-align:center;color:#007bff;margin-top:30px;">Bookmark Your Tabs</h1>\n            <ul id="bookmark-list" style="list-style-type:none;padding:0;"></ul>\n            <div id="resizer" style="position:absolute;width:10px;height:100%;top:0;left:-10px;cursor:ew-resize;"></div>\n          </div>\n        </div>\n      `;function n(e){const n=window.innerWidth-e.clientX;document.getElementById("extension-sidebar").style.width=n+"px",document.body.style.marginRight=n+"px"}function o(e){window.removeEventListener("mousemove",n,!1),window.removeEventListener("mouseup",o,!1)}document.body.insertAdjacentHTML("beforeend",s),document.body.style.marginRight=`${t}px`,document.getElementById("close-sidebar").addEventListener("click",(()=>{chrome.storage.local.set({sidebarState:"closed"}),document.body.style.marginRight="0",document.getElementById("extension-sidebar").remove()})),document.getElementById("resizer").addEventListener("mousedown",(function(e){window.addEventListener("mousemove",n,!1),window.addEventListener("mouseup",o,!1)}),!1),chrome.runtime.sendMessage({action:"fetchTabs"})}}function readGoogleSearchResults(){function e(){const e=window.location.href;let n=e.includes("google.com/search"),o=e.includes("scholar.google.com");if(n||o){const t=new URLSearchParams(e.split("?")[1]).get("q");if(t){const s={searchQuery:t,url:e,isGoogle:n,isGoogleScholar:o,isUsed:!1,dateAdded:(new Date).toISOString()};chrome.runtime.sendMessage({action:"latestNewQuery",data:s},(e=>{chrome.runtime.lastError&&console.error("Error sending message:",chrome.runtime.lastError)}))}}}window.addEventListener("load",e);let n=window.location.href;new MutationObserver((()=>{const o=window.location.href;o!==n&&(n=o,e())})).observe(document.body,{childList:!0,subtree:!0})}async function addElement(){const e=document.createElement("qsp-mini-app"),n=chrome.runtime.getURL("images/quicksearchIcon.svg"),o=await chrome.storage.local.get(["positionY","side","movedBefore"]),t=e.attachShadow({mode:"open"}),s=document.createElement("style");s.textContent="\n    .main-btn {\n      display: flex;\n      align-items: center;\n      position: fixed;\n      border: none;\n      right: 0;\n      z-index: 999999;\n      padding: 8px 10px;\n      background: #fff;\n      border-radius: 9999px 0 0 9999px;\n      cursor: pointer; \n      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n      transition: all 0.2s ease-in-out;\n    }\n\n    .main-btn.m-on-left {\n      left: 0;\n      right: auto;\n      padding-left: 10px;\n      padding-right: auto;\n      border-radius: 0 9999px 9999px 0;\n    }\n\n    .main-rounded {\n      display: flex;\n      align-items: center;\n      position: fixed;\n      border: none;\n      z-index: 999999;\n      padding: 8px;\n      background: #fff;\n      border-radius: 50%;\n      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n      transition: all 0.2s ease-in-out;\n    }\n\n    .main-rounded img {\n      width: 20px;\n      height: 20px;\n    }\n\n    .main-btn:hover {\n      padding-left: 14px;\n      padding-right: 14px;\n    }\n\n    .main-btn:hover .close-btn {\n      display: block;\n    }\n\n    .main-btn img {\n      width: 20px;\n      height: 20px;\n    }\n\n    .close-btn {\n      position: absolute;\n      bottom: -2px;\n      left: -2px;\n      background: red;\n      color: white;\n      border: none;\n      border-radius: 50%;\n      font-size: 10px;\n      width: 16px;\n      height: 16px;\n      display: none;\n      text-align: center;\n      cursor: pointer;\n      padding: 0; \n    }\n\n    .close-btn.b-on-left {\n      left: auto;\n      right: -2px;\n    }\n\n    .confirm-box {\n      padding: 12px;\n      position: absolute;\n      bottom: 100%;\n      font-family: poppins;\n      color: grey;\n      right: 50%;\n      width: auto;\n      border: none;\n      outline: none;\n      white-space: nowrap;\n      display: none;\n      align-items: start;\n      flex-direction: column;\n      background: #fff;\n      z-index: 999999999;\n      border-radius: 8px;\n      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n      gap: 12px;\n    }\n    \n    .confirm-box.c-on-left {\n      right: auto;\n      left: 50%;\n    }\n  ";const i=document.createElement("button"),r=document.createElement("button"),a=document.createElement("div");i.className=o&&"left"===o.side?"main-btn m-on-left":"main-btn",i.style.top=o&&o.movedBefore?`${o.positionY}px`:"auto",i.style.bottom=o&&o.movedBefore?"auto":"150px",i.innerHTML=`<img src="${n}" alt="search icon" />`,i.addEventListener("click",(()=>{chrome.runtime.sendMessage({action:"toggle_sidebar"})})),r.className=o&&"left"===o.side?"close-btn b-on-left":"close-btn",r.textContent="Ã—",r.addEventListener("click",(e=>{e.stopPropagation(),a.style.display="flex",a.focus()})),a.tabIndex=0,a.onblur=()=>a.style.display="none",a.className=o&&"left"===o.side?"confirm-box c-on-left":"confirm-box",a.innerHTML="\n    <span class='disable-site' >Disable on this site</span>\n    <span class='disable-all' >Disable on all site</span>\n  ",a.querySelector(".disable-site").addEventListener("click",(n=>{n.stopPropagation(),a.style.display="none",e.remove()})),a.querySelector(".disable-all").addEventListener("click",(n=>{n.stopPropagation(),chrome.storage.local.set({buttonDisabledGlobally:!0}),a.style.display="none",e.remove()}));let c=!1,l=0,d=0,m=0,p=0;i.addEventListener("mousedown",(e=>{e.preventDefault(),c=!0;const n=i.getBoundingClientRect();l=e.clientX-n.left,d=e.clientY-n.top,m=e.clientX-l,p=e.clientY-d,i.style.position="fixed"})),window.addEventListener("mousemove",(e=>{c&&(o.movedBefore||chrome.storage.local.set({movedBefore:!0}),i.className="main-rounded",m=e.clientX-l,p=e.clientY-d,i.style.left=e.clientX-l+"px",i.style.top=e.clientY-d+"px",i.style.right="auto",i.style.bottom="auto",i.style.cursor="move")})),window.addEventListener("mouseup",(()=>{if(!c)return;c=!1,i.style.cursor="pointer",i.style.left="auto";const e=window.innerWidth/2;m<e?(i.className="main-btn m-on-left",r.className="close-btn b-on-left",a.className="confirm-box c-on-left",chrome.storage.local.set({positionY:p,side:"left"})):(i.style.right="0",i.className="main-btn",r.className="close-btn",a.className="confirm-box",chrome.storage.local.set({positionY:p,side:"right"})),window.onmouseup=null,window.onmousemove=null})),t.appendChild(s),i.appendChild(r),i.appendChild(a),t.appendChild(i),document.documentElement.appendChild(e)}chrome.storage.local.get("sidebarState",(e=>{"open"===e.sidebarState&&toggleSidebar()})),chrome.runtime.onMessage.addListener((e=>{if("populateTabs"===e.action){const n=document.getElementById("bookmark-list");e.tabs.forEach((e=>{const o=document.createElement("li");o.textContent=e.title,o.style="background-color:#fff;margin:10px 0;padding:10px;border-radius:4px;cursor:pointer;box-shadow:0 2px 4px rgba(0,0,0,0.1);",o.addEventListener("click",(()=>{chrome.bookmarks.create({title:e.title,url:e.url})})),n.appendChild(o)}))}})),readGoogleSearchResults(),chrome.storage.local.set({disabledSites:[]}),chrome.storage.local.get(["displayType","buttonDisabledGlobally"],(e=>{const n=e.buttonDisabledGlobally;"sidebar"!==e.displayType||n||addElement()}));const MessageTypes={MEETING_DETECTED:"MEETING_DETECTED",OVERLAY_CLOSED:"OVERLAY_CLOSED",SUMMARY_REQUESTED:"SUMMARY_REQUESTED",CONSENT_CONFIRMED:"CONSENT_CONFIRMED",CONSENT_CANCELLED:"CONSENT_CANCELLED",SHOW_CONSENT_MODAL:"SHOW_CONSENT_MODAL",CLOSE_CONSENT_MODAL:"CLOSE_CONSENT_MODAL",CHECK_MEETING:"CHECK_MEETING",TAB_UPDATED:"TAB_UPDATED",SHOW_RECORDER_MODAL:"SHOW_RECORDER_MODAL",CLOSE_RECORDER_MODAL:"CLOSE_RECORDER_MODAL",PENDING_CONSENT_AUTH:"PENDING_CONSENT_AUTH",START_RECORDING:"START_RECORDING",PAUSE_RECORDING:"PAUSE_RECORDING",RESUME_RECORDING:"RESUME_RECORDING",SAVE_RECORDING:"SAVE_RECORDING",WARNING_2_MINUTES:"WARNING_2_MINUTES",WARNING_1_MINUTE:"WARNING_1_MINUTE",SIDEBAR_STATE:"SIDEBAR_STATE",RECORDING_ERROR:"RECORDING_ERROR",RECORDING_STARTED:"RECORDING_STARTED",ACTIVATE_MICROPHONE:"ACTIVATE_MICROPHONE"};let closedOverlays=new Set,isOverlayActive=!1,isRecording=!1,lastInjectionTime=0,lastMeetingDetectedTime=0,lastInjectionErrorTime=0,isSidebarOpen=!1;const INJECTION_COOLDOWN=5e3,INSTRUCTION_OVERLAY_TIMEOUT=9e3,WARNING_OVERLAY_TIMEOUT=8e3;function isMeetingPlatform(e){return[/meet\.google\.com\/.+/,/zoom\.us\/j\/.+/,/zoom\.us\/wc\/.+/,/app\.zoom\.us\/wc\/.+/,/teams\.microsoft\.com\/l\/meetup-join\/.+/,/teams\.microsoft\.com\/v2\/.+/,/teams\.live\.com\/v2\/.+/].some((n=>n.test(e.toLowerCase())))}function isZoomPlatform(e){return/zoom\.us\/(j|wc)\/.+/.test(e.toLowerCase())||/app\.zoom\.us\/wc\/.+/.test(e.toLowerCase())}function isGoogleMeetPlatform(e){return/meet\.google\.com\/.+/.test(e.toLowerCase())}function createInitialOverlay(){if(isOverlayActive||closedOverlays.has(window.location.href)||isRecording)return void console.log("script.js: Skipping initial overlay creation, isOverlayActive:",isOverlayActive,"closedOverlays:",closedOverlays.has(window.location.href),"isRecording:",isRecording);const e=Date.now();if(e-lastInjectionTime<5e3)console.log("script.js: Injection cooldown active, skipping");else try{const n=document.createElement("div"),o=chrome.runtime.getURL("icons/mainLogo.png");n.id="meeting-recorder-overlay",n.innerHTML=`\n      <div class="overlay-content">\n        <img src="${o}" alt="Quicksearchplus Logo" class="meeting-overlay-logo" />\n        <p>Would you like a meeting summary?</p>\n        <div class="overlay-buttons">\n          <button id="summary-yes">Meeting Summary</button>\n          <button id="summary-no">No</button>\n        </div>\n      </div>\n    `,document.body.appendChild(n);const t=document.createElement("link");t.rel="stylesheet",t.href=chrome.runtime.getURL("overlay.css"),document.head.appendChild(t),document.getElementById("summary-yes").addEventListener("click",(()=>{console.log("script.js: Summary requested, sending messages"),chrome.runtime.sendMessage({type:MessageTypes.SUMMARY_REQUESTED,url:window.location.href}),chrome.runtime.sendMessage({type:MessageTypes.SHOW_CONSENT_MODAL,url:window.location.href}),closeOverlay(n),createInstructionOverlay()})),document.getElementById("summary-no").addEventListener("click",(()=>{console.log("script.js: Overlay closed"),chrome.runtime.sendMessage({type:MessageTypes.OVERLAY_CLOSED,url:window.location.href}),closeOverlay(n)})),isOverlayActive=!0,lastInjectionTime=e,console.log("script.js: Initial overlay injected")}catch(n){console.error("script.js: Failed to inject initial overlay:",n),lastInjectionErrorTime=e}}function createInstructionOverlay(){try{const e=document.createElement("div");e.id="instruction-overlay",e.innerHTML='\n      <div class="overlay-content">\n        <p>To Proceed with Meeting Summarization: Please open the Quicksearchplus Extension and confirm your consent by clicking <span style="color: blue">"I Agree"</span>.</p>\n      </div>\n    ',document.body.appendChild(e);const n=document.createElement("link");n.rel="stylesheet",n.href=chrome.runtime.getURL("overlay.css"),document.head.appendChild(n),setTimeout((()=>{closeOverlay(e)}),9e3),isOverlayActive=!0,console.log("script.js: Instruction overlay injected")}catch(e){console.error("script.js: Failed to inject instruction overlay:",e),lastInjectionErrorTime=Date.now()}}function createWarningOverlay(e){const n=Date.now();if(n-lastInjectionTime<5e3)console.log("script.js: Warning overlay injection cooldown active, skipping");else try{const o=document.getElementById("warning-overlay");o&&(o.parentNode.removeChild(o),console.log("script.js: Removed existing warning overlay"));const t=document.createElement("div"),s=chrome.runtime.getURL("icons/mainLogo.png");t.id="warning-overlay",t.innerHTML=`\n      <div class="overlay-content">\n        <img src="${s}" alt="Company Logo" class="meeting-overlay-logo" />\n        <p>${e}</p>\n        <div class="overlay-buttons">\n          <button id="reopen-sidebar">Open Extension</button>\n        </div>\n      </div>\n    `,document.body.appendChild(t);const i=document.createElement("link");i.rel="stylesheet",i.href=chrome.runtime.getURL("overlay.css"),document.head.appendChild(i),document.getElementById("reopen-sidebar").addEventListener("click",(()=>{console.log("script.js: Reopen sidebar clicked, sending SHOW_RECORDER_MODAL"),chrome.runtime.sendMessage({type:MessageTypes.SHOW_RECORDER_MODAL,url:window.location.href}),closeOverlay(t)})),setTimeout((()=>{console.log("script.js: Closing warning overlay after 8 seconds"),closeOverlay(t)}),8e3),isOverlayActive=!0,lastInjectionTime=n,console.log("script.js: Warning overlay injected with message:",e)}catch(e){console.error("script.js: Failed to inject warning overlay:",e),lastInjectionErrorTime=n}}function closeOverlay(e){e&&e.parentNode&&(e.parentNode.removeChild(e),console.log("script.js: Overlay closed")),isOverlayActive=!1,"meeting-recorder-overlay"!==e.id&&"instruction-overlay"!==e.id||closedOverlays.add(window.location.href)}function checkForMeeting(){const e=Date.now();if(e-lastMeetingDetectedTime<1e3)return void console.log("script.js: Meeting check throttled");const n=window.location.href;!isMeetingPlatform(n)||isOverlayActive||closedOverlays.has(n)||isRecording||(console.log("script.js: Meeting detected, creating overlay"),chrome.runtime.sendMessage({type:MessageTypes.MEETING_DETECTED,url:n}),createInitialOverlay(),lastMeetingDetectedTime=e)}console.log("script.js: Injected into",window.location.href),checkForMeeting();const observer=new MutationObserver((()=>{checkForMeeting()}));observer.observe(document.body,{childList:!0,subtree:!0}),chrome.runtime.onMessage.addListener((async(e,n,o)=>{switch(console.log("script.js: Received message:",e,"from sender:",n),e.type){case MessageTypes.CHECK_MEETING:console.log("script.js: Handling CHECK_MEETING");const n=isMeetingPlatform(window.location.href);try{o({isMeeting:n}),console.log("script.js: Sent CHECK_MEETING response:",{isMeeting:n})}catch(e){console.error("script.js: Error sending CHECK_MEETING response:",e)}break;case MessageTypes.SIDEBAR_STATE:isSidebarOpen=e.isOpen,console.log("script.js: Sidebar state updated, isSidebarOpen:",isSidebarOpen);break;case MessageTypes.ACTIVATE_MICROPHONE:console.log("script.js: Activating microphone");try{(await navigator.mediaDevices.getUserMedia({audio:!0})).getTracks().forEach((e=>e.stop())),console.log("Microphone access granted."),chrome.runtime.sendMessage({type:"MICROPHONE_ACTIVATED"})}catch(e){console.error("Microphone permission error:",e),chrome.runtime.sendMessage({type:"MICROPHONE_ERROR",error:"NotAllowedError"===e.name?"Microphone access denied. Please allow microphone access to record your voice.":`Error accessing microphone: ${e.message}`})}break;case MessageTypes.RECORDING_STARTED:console.log("script.js: Recording started, closing initial overlay"),isRecording=!0;const t=document.getElementById("meeting-recorder-overlay");t&&closeOverlay(t);const s=document.getElementById("instruction-overlay");s&&closeOverlay(s);break;case MessageTypes.WARNING_2_MINUTES:console.log("script.js: Received WARNING_2_MINUTES, isSidebarOpen:",isSidebarOpen),isSidebarOpen||createWarningOverlay("Heads-up! Your meeting summary session ends in 2 minutes. Want to keep the recap going? Just click to start a new session and weâ€™ll continue capturing everything for youâ€”easy as that.");break;case MessageTypes.WARNING_1_MINUTE:console.log("script.js: Received WARNING_1_MINUTE, isSidebarOpen:",isSidebarOpen),isSidebarOpen||createWarningOverlay("Heads-up! Your meeting summary session ends in 1 minute. Want to keep the recap going? Just click to start a new session and weâ€™ll continue capturing everything for youâ€”easy as that.");break;case MessageTypes.RECORDING_ERROR:console.log(`script.js: Received ${e.type}, closing any warning overlays`),isRecording=!1;const i=document.getElementById("warning-overlay");i&&closeOverlay(i),closedOverlays.add(window.location.href);break;case MessageTypes.SAVE_RECORDING:case MessageTypes.recordingComplete:console.log(`script.js: Received ${e.type}, resetting recording state`),isRecording=!1,closedOverlays.add(window.location.href)}return!0}));