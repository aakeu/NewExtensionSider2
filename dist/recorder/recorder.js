let mediaRecorder,recordedBlobs,mediaStream,audioContext,mediaStreamSource,micStream,micSource;console.log("Offscreen: recorder.js script loaded.");let recordingTimeout=null;document.addEventListener("DOMContentLoaded",(()=>{if(console.log("Offscreen: DOMContentLoaded event fired. Recorder script is ready."),!navigator.mediaDevices||!navigator.mediaDevices.getUserMedia)return console.error("Offscreen: navigator.mediaDevices.getUserMedia is not available in this context."),void chrome.runtime.sendMessage({type:"RECORDING_ERROR",error:"MediaDevices API not available in offscreen document."});console.log("Offscreen: navigator.mediaDevices.getUserMedia is available."),chrome.runtime.onMessage.addListener((async e=>{if("offscreen"===e.target)if(console.log("Offscreen: Received message:",e.type),"startRecording"===e.type){const{streamId:o,duration:r,token:t,totalPausedTime:a}=e.data;console.log("Offscreen: Handling startRecording message with streamId:",o),console.log("Offscreen: Recording duration set to:",r,"milliseconds"),console.log("Offscreen: Initial totalPausedTime:",a),console.log("Offscreen: Token from background.js",t),mediaRecorder&&"inactive"!==mediaRecorder.state&&(console.warn("Offscreen: Stopping previous recorder before starting new one."),mediaRecorder.stop(),mediaStream&&mediaStream.getTracks().forEach((e=>e.stop())),micStream&&micStream.getTracks().forEach((e=>e.stop())),audioContext&&audioContext.close()),recordedBlobs=[],console.log("Offscreen: Attempting to get tab audio with streamId:",o),mediaStream=await navigator.mediaDevices.getUserMedia({audio:{mandatory:{chromeMediaSource:"tab",chromeMediaSourceId:o}}}),console.log("Offscreen: Successfully got tab MediaStream:",mediaStream);try{console.log("Offscreen: Waiting 500ms before requesting microphone access..."),await new Promise((e=>setTimeout(e,500))),console.log("Offscreen: Attempting to get microphone audio...");try{micStream=await navigator.mediaDevices.getUserMedia({audio:{echoCancellation:!0,noiseSuppression:!0,autoGainControl:!0}}),console.log("Offscreen: Successfully got microphone MediaStream:",micStream)}catch(e){throw console.error("Offscreen: Microphone access failed:",e.name,e.message),e}console.log("Offscreen: Creating AudioContext..."),audioContext=new AudioContext;const e=audioContext.createMediaStreamDestination();mediaStreamSource=audioContext.createMediaStreamSource(mediaStream),mediaStreamSource.connect(e),console.log("Offscreen: Tab audio connected to recording destination.");const o=audioContext.destination;mediaStreamSource.connect(o),console.log("Offscreen: Tab audio connected to speaker output for playback."),micSource=audioContext.createMediaStreamSource(micStream),micSource.connect(e),console.log("Offscreen: Microphone audio connected to recording destination.");const c=e.stream;console.log("Offscreen: Combined MediaStream created with",c.getAudioTracks().length,"audio tracks.");const d=c.getAudioTracks();if(!(d.length>0)){const e="Combined MediaStream has no audio tracks. Cannot record.";return console.error(e),chrome.runtime.sendMessage({type:"RECORDING_ERROR",error:e}),mediaStream&&mediaStream.getTracks().forEach((e=>e.stop())),micStream&&micStream.getTracks().forEach((e=>e.stop())),void(audioContext&&audioContext.close())}if(console.log("Offscreen: Combined stream audio track state:",{enabled:d[0].enabled,muted:d[0].muted,readyState:d[0].readyState}),!d[0].enabled||d[0].muted||"live"!==d[0].readyState){const e="Combined audio track is not ready or is muted/disabled. Please ensure audio is active.";return console.error(e),chrome.runtime.sendMessage({type:"RECORDING_ERROR",error:e}),mediaStream&&mediaStream.getTracks().forEach((e=>e.stop())),micStream&&micStream.getTracks().forEach((e=>e.stop())),void(audioContext&&audioContext.close())}const n="audio/webm;codecs=opus";if(!MediaRecorder.isTypeSupported(n)){const e=`MediaRecorder does not support ${n}.`;return console.error(e),chrome.runtime.sendMessage({type:"RECORDING_ERROR",error:e}),mediaStream&&mediaStream.getTracks().forEach((e=>e.stop())),micStream&&micStream.getTracks().forEach((e=>e.stop())),void(audioContext&&audioContext.close())}console.log(`Offscreen: MediaRecorder supports ${n}.`),mediaRecorder=new MediaRecorder(c,{mimeType:n}),console.log("Offscreen: MediaRecorder created for combined stream. Initial state:",mediaRecorder.state),mediaRecorder.ondataavailable=e=>{e.data&&e.data.size>0?recordedBlobs.push(e.data):console.warn("Offscreen: ondataavailable event received, but data is empty or null.")},mediaRecorder.onstart=()=>{console.log("Offscreen: MediaRecorder STARTED. State:",mediaRecorder.state)},mediaRecorder.onpause=()=>{console.log("Offscreen: MediaRecorder PAUSED. State:",mediaRecorder.state)},mediaRecorder.onresume=()=>{console.log("Offscreen: MediaRecorder RESUMED. State:",mediaRecorder.state)},mediaRecorder.onstop=async()=>{if(console.log("Offscreen: MediaRecorder STOPPED. Final state:",mediaRecorder.state),mediaStream&&(mediaStream.getTracks().forEach((e=>e.stop())),console.log("Offscreen: Tab MediaStream tracks stopped.")),micStream&&(micStream.getTracks().forEach((e=>e.stop())),console.log("Offscreen: Microphone MediaStream tracks stopped.")),audioContext&&(audioContext.close(),console.log("Offscreen: AudioContext closed.")),console.log("Offscreen: recordedBlobs array length before Blob creation:",recordedBlobs.length),recordedBlobs.length>0&&(console.log("Offscreen: First recordedBlob size:",recordedBlobs[0].size),console.log("Offscreen: Last recordedBlob size:",recordedBlobs[recordedBlobs.length-1].size)),0===recordedBlobs.length)return console.warn("Offscreen: No audio data was collected. Recorded Blobs length is 0."),void chrome.runtime.sendMessage({type:"RECORDING_ERROR",error:"No audio data captured."});const e="audio/webm;codecs=opus",o=new Blob(recordedBlobs,{type:e});console.log("Offscreen: Created Blob:",o),console.log("Offscreen: Converting Blob to base64 string.");const r=await new Promise(((e,r)=>{const t=new FileReader;t.onloadend=()=>{if(t.result){const o=t.result.split(",")[1];console.log("Offscreen: Base64 string length:",o.length),e(o)}else r(new Error("FileReader result is null or empty."))},t.onerror=()=>r(new Error(`FileReader error: ${t.error.name}`)),t.readAsDataURL(o)}));console.log("Offscreen: Sending base64 string to background script for download.");try{await chrome.runtime.sendMessage({type:"downloadRecording",base64:r,mimeType:e,filename:`recording-${(new Date).toISOString().slice(0,19).replace(/[:.]/g,"-")}.webm`,authToken:t}),console.log("Offscreen: Successfully sent base64 string to background script.")}catch(e){console.error("Offscreen: Error sending base64 string to background script:",e),chrome.runtime.sendMessage({type:"RECORDING_ERROR",error:`Failed to send recording: ${e.message}`})}console.log("Offscreen: Cleaning up recorder state variables."),recordedBlobs=null,mediaRecorder=null,mediaStream=null,micStream=null,audioContext=null,mediaStreamSource=null,micSource=null},mediaRecorder.onerror=e=>{console.error("Offscreen: MediaRecorder ERROR:",e.error),chrome.runtime.sendMessage({type:"RECORDING_ERROR",error:`MediaRecorder error: ${e.error.name}`}),mediaStream&&mediaStream.getTracks().forEach((e=>e.stop())),micStream&&micStream.getTracks().forEach((e=>e.stop())),audioContext&&audioContext.close(),recordedBlobs=null,mediaRecorder=null,mediaStream=null,micStream=null,audioContext=null,mediaStreamSource=null,micSource=null},mediaRecorder.start(10),console.log("Offscreen: MediaRecorder start() called. Current state:",mediaRecorder.state),recordingTimeout&&clearTimeout(recordingTimeout),recordingTimeout=setTimeout((()=>{mediaRecorder&&"recording"===mediaRecorder.state?(console.log("Offscreen: Timeout reached. Stopping MediaRecorder."),mediaRecorder.stop()):console.log("Offscreen: Timeout reached, but MediaRecorder not in 'recording' state (current state: "+(mediaRecorder?mediaRecorder.state:"null")+").")}),r+a),console.log("Offscreen: Set recording timeout for",r+a,"ms")}catch(e){let o;return o="NotAllowedError"===e.name?"Microphone permission was denied. Please grant permission to record all voices.":"NotFoundError"===e.name?"No microphone found. Please connect a microphone and try again.":`Recording setup failed: ${e.message}`,console.error("Offscreen: ",o),chrome.runtime.sendMessage({type:"RECORDING_ERROR",error:o}),mediaStream&&mediaStream.getTracks().forEach((e=>e.stop())),micStream&&micStream.getTracks().forEach((e=>e.stop())),audioContext&&audioContext.close(),recordedBlobs=null,mediaRecorder=null,mediaStream=null,micStream=null,audioContext=null,mediaStreamSource=null,void(micSource=null)}}else if("stopRecording"===e.type)console.log("Offscreen: Received stopRecording message."),mediaRecorder&&"recording"===mediaRecorder.state&&(mediaRecorder.stop(),console.log("Offscreen: MediaRecorder manually stopped.")),recordingTimeout&&(clearTimeout(recordingTimeout),recordingTimeout=null,console.log("Offscreen: Cleared recording timeout on stop."));else if("pauseRecording"===e.type)console.log("Offscreen: Received pauseRecording message."),mediaRecorder&&"recording"===mediaRecorder.state&&(mediaRecorder.pause(),console.log("Offscreen: MediaRecorder paused."),recordingTimeout&&(clearTimeout(recordingTimeout),recordingTimeout=null,console.log("Offscreen: Cleared recording timeout on pause.")));else if("resumeRecording"===e.type)console.log("Offscreen: Received resumeRecording message."),mediaRecorder&&"paused"===mediaRecorder.state&&(mediaRecorder.resume(),console.log("Offscreen: MediaRecorder resumed."));else if("updateRecordingTimeout"===e.type){const{duration:o,totalPausedTime:r}=e.data;console.log("Offscreen: Received updateRecordingTimeout with duration:",o,"totalPausedTime:",r),mediaRecorder&&"recording"===mediaRecorder.state?(recordingTimeout&&clearTimeout(recordingTimeout),recordingTimeout=setTimeout((()=>{mediaRecorder&&"recording"===mediaRecorder.state?(console.log("OffOffscreen: Updated timeout reached. Stopping MediaRecorder."),mediaRecorder.stop()):console.log("Offscreen: Updated timeout reached, but MediaRecorder not in 'recording' state (current state: "+(mediaRecorder?mediaRecorder.state:"null")+").")}),o+r),console.log("Offscreen: Set updated recording timeout for",o+r,"ms")):console.warn("Offscreen: Received updateRecordingTimeout but MediaRecorder is not recording. State:",mediaRecorder?mediaRecorder.state:"null")}}))}));