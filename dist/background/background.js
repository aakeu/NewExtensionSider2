let sideBarIsOpen=0;chrome.runtime.onInstalled.addListener((()=>{chrome.storage.local.get(["displayType"],(e=>{e.displayType||chrome.storage.local.set({displayType:"sidebar"})}))})),chrome.action.onClicked.addListener((e=>{console.log("Extension clicked",`Tab ID: ${e.id}, Window ID: ${e.windowId}`),chrome.storage.local.get(["displayType"],(n=>{"sidebar"===(n.displayType||"sidebar")?chrome.sidePanel.open({windowId:e.windowId}):(chrome.action.setPopup({popup:"popup.html"}),chrome.windows.create({url:"popup.html",type:"popup",width:700,height:600}))}))})),chrome.action.setPopup({popup:""}),chrome.runtime.onConnect.addListener((e=>{"sidepanel"===e.name&&(sideBarIsOpen=1,e.onDisconnect.addListener((()=>{sideBarIsOpen=0})))})),chrome.runtime.onMessage.addListener(((e,n)=>{if("toggle_sidebar"===e.action)return chrome.storage.local.get("displayType",(e=>{"sidebar"!==e.displayType||sideBarIsOpen?"sidebar"===e.displayType&&(chrome.sidePanel.setOptions({enabled:!1}),sideBarIsOpen=0,chrome.sidePanel.setOptions({enabled:!0,path:"sidebar.html"})):(chrome.sidePanel.open({windowId:n.tab.windowId}),sideBarIsOpen=1)})),!0})),chrome.runtime.onMessage.addListener((e=>{"MICROPHONE_ACTIVATED"===e.type&&console.log("Background: pageâ€‘level mic permission is active")})),chrome.runtime.onMessage.addListener((function(e,n,o){if("latestNewQuery"===e.action){const{searchQuery:n,isGoogle:r,isGoogleScholar:t,url:s,isUsed:i,dateAdded:a}=e.data,c={searchQuery:n,isGoogle:r,isGoogleScholar:t,isUsed:i,dateAdded:a,url:s},d=r?"extractedGoogleQueryDetails":"extractedScholarQueryDetails";chrome.storage.local.set({[d]:c},(()=>{chrome.runtime.lastError?console.error("Error storing query:",chrome.runtime.lastError):chrome.runtime.sendMessage({action:"newQueryAvailable",data:c})})),o({success:!0})}}));const trackedTabs=new Map,trackedCurrentTab={tab:null};let lastUpdate=Date.now();const MIN_UPDATE_INTERVAL=18e4;function isValidUrl(e){return!!e&&""!==e.trim()&&!e.startsWith("chrome://extensions/")&&!e.startsWith("chrome://newtab/")}function updateTabList(){chrome.tabs.query({},(e=>{const n=new Map;e.forEach((e=>{e.url&&isValidUrl(e.url)&&(n.has(e.url)||n.set(e.url,{url:e.url,title:e.title||"Untitled",favicon:e.favIconUrl||"icons/icon48.png",foundInStore:!1}))})),trackedTabs.clear(),n.forEach(((e,n)=>trackedTabs.set(n,e))),chrome.runtime.sendMessage({type:"TABS_UPDATE",tabs:Array.from(trackedTabs.values())}).catch((()=>{}))}))}function updateCurrentTab(){chrome.tabs.query({active:!0,currentWindow:!0},(e=>{const n=e[0];n&&n.url&&isValidUrl(n.url)?trackedCurrentTab.tab={url:n.url,title:n.title||"Untitled",favicon:n.favIconUrl||"icons/icon48.png",foundInStore:!1}:trackedCurrentTab.tab={url:null,title:"There are no carriers or apps available...",favicon:"images/tabScreenshot.svg"},chrome.runtime.sendMessage({type:"CURRENT_TAB_UPDATE",tab:trackedCurrentTab.tab}).catch((()=>{}))}))}function conditionalUpdate(){const e=Date.now();e-lastUpdate>=18e4&&(updateTabList(),updateCurrentTab(),lastUpdate=e)}chrome.tabs.onCreated.addListener((e=>{updateTabList(),e.active&&updateCurrentTab(),lastUpdate=Date.now()})),chrome.tabs.onUpdated.addListener(((e,n,o)=>{(n.url||n.title||n.favIconUrl)&&(updateTabList(),o.active&&updateCurrentTab(),lastUpdate=Date.now())})),chrome.tabs.onRemoved.addListener((()=>{updateTabList(),updateCurrentTab(),lastUpdate=Date.now()})),chrome.tabs.onActivated.addListener((e=>{updateCurrentTab(),lastUpdate=Date.now()})),updateTabList(),updateCurrentTab(),chrome.runtime.onMessage.addListener(((e,n,o)=>("GET_TABS"===e.type?o({tabs:Array.from(trackedTabs.values())}):"GET_THE_CURRENT_TAB"===e.type&&o({tab:trackedCurrentTab.tab}),!0))),chrome.runtime.onMessage.addListener(((e,n,o)=>{"USER_LOGGED_IN"!==e.type&&"USER_LOGGED_OUT"!==e.type||chrome.runtime.sendMessage(e),o({success:!0})}));let isAuthFlowInProgress=!1;function downloadImage(e,n){chrome.downloads.download({url:e,filename:n,saveAs:!0},(function(e){console.log(`Download initiated with ID: ${e}`)}))}chrome.runtime.onMessage.addListener(((e,n,o)=>{if("loginWithGoogle"===e.action){if(isAuthFlowInProgress)return o({success:!1,error:"Authentication flow is already in progress."}),!0;isAuthFlowInProgress=!0,fetch("https://quicksearchserver-8ee1999baeab.herokuapp.com/api/auth/google/extension/start",{method:"GET"}).then((e=>e.json())).then((e=>{const n=e.authUrl;chrome.identity.launchWebAuthFlow({url:n,interactive:!0},(function(e){if(isAuthFlowInProgress=!1,chrome.runtime.lastError)return void o({success:!1,error:chrome.runtime.lastError.message});const n=new URLSearchParams(new URL(e).search).get("code");fetch(`https://quicksearchserver-8ee1999baeab.herokuapp.com/api/auth/google/extension/redirect?code=${n}`,{method:"GET"}).then((e=>e.json())).then((async e=>{e.token&&e.refreshToken?chrome.runtime.sendMessage({action:"loginCompleted",token:e.token,refreshToken:e.refreshToken,user:e.user,tokenExpires:e.tokenExpires,isNewUser:e.isNewUser||!1}):"Google Authentication Failed"===e.message&&"Http Exception"===e.error?chrome.runtime.sendMessage({action:"needLoginViaEmailAndPassword",provider:"email"}):chrome.runtime.sendMessage({action:"loginFailed",error:"Failed to get tokens from server"})})).catch((e=>{console.error("Error fetching redirect URL:",e),o({success:!1,error:e.message})}))}))})).catch((e=>{console.error("Error fetching OAuth start URL:",e),o({success:!1,error:e.message})}))}return!0})),chrome.runtime.onMessage.addListener(((e,n,o)=>{"FOLDERS_FETCHED"===e.type&&chrome.runtime.sendMessage(e),o({success:!0})})),chrome.runtime.onMessage.addListener(((e,n,o)=>{"BOOKMARK_DETAILS_FETCHED"===e.type&&chrome.runtime.sendMessage(e),o({success:!0})})),chrome.runtime.onMessage.addListener(((e,n,o)=>{"BACK_TO_HOME_SECTION"===e.type&&chrome.runtime.sendMessage(e),o({success:!0})})),chrome.runtime.onMessage.addListener(((e,n,o)=>{"BACK_TO_CURRENT_TAB_SECTION"===e.type&&chrome.runtime.sendMessage(e),o({success:!0})})),chrome.runtime.onMessage.addListener(((e,n,o)=>{"BACK_TO_ALL_TABS_SECTION"===e.type&&chrome.runtime.sendMessage(e),o({success:!0})})),chrome.runtime.onMessage.addListener(((e,n,o)=>{"BACK_TO_GPT_SECTION"===e.type&&chrome.runtime.sendMessage(e),o({success:!0})})),chrome.runtime.onMessage.addListener(((e,n,o)=>{"BACK_TO_DASHBOARD_SECTION"===e.type&&chrome.runtime.sendMessage(e),o({success:!0})})),chrome.runtime.onMessage.addListener(((e,n,o)=>{"BACK_TO_PROFILE_SECTION"===e.type&&chrome.runtime.sendMessage(e),o({success:!0})})),chrome.runtime.onMessage.addListener(((e,n,o)=>{"GET_STORED_DATA"===e.type&&chrome.runtime.sendMessage(e),o({success:!0})})),chrome.runtime.onMessage.addListener(((e,n,o)=>{"USER_STATUS_FETCHED"===e.type&&chrome.runtime.sendMessage(e),o({success:!0})})),chrome.runtime.onMessage.addListener(((e,n,o)=>{"GPT_STORED"===e.type&&chrome.runtime.sendMessage(e),o({success:!0})})),chrome.runtime.onMessage.addListener(((e,n,o)=>{"BACK_TO_DASHBOARD_SECTION_COLLECTIONS"===e.type&&chrome.runtime.sendMessage(e),o({success:!0})})),chrome.runtime.onMessage.addListener(((e,n,o)=>{"BACK_TO_DASHBOARD_SECTION_FAVORITES"===e.type&&chrome.runtime.sendMessage(e),o({success:!0})})),chrome.runtime.onMessage.addListener(((e,n,o)=>{"BACK_TO_DASHBOARD_SECTION_LINKS"===e.type&&chrome.runtime.sendMessage(e),o({success:!0})})),chrome.runtime.onMessage.addListener(((e,n,o)=>{"BACK_TO_DASHBOARD_SECTION_IMAGES"===e.type&&chrome.runtime.sendMessage(e),o({success:!0})})),chrome.runtime.onMessage.addListener(((e,n,o)=>{"BACK_TO_DASHBOARD_SECTION_VIDEOS"===e.type&&chrome.runtime.sendMessage(e),o({success:!0})})),chrome.runtime.onMessage.addListener(((e,n,o)=>{"BACK_TO_DASHBOARD_SECTION_ARTICLES"===e.type&&chrome.runtime.sendMessage(e),o({success:!0})})),chrome.runtime.onMessage.addListener(((e,n,o)=>{"BACK_TO_DASHBOARD_SECTION_SETTINGS"===e.type&&chrome.runtime.sendMessage(e),o({success:!0})})),chrome.runtime.onMessage.addListener(((e,n,o)=>{"BACK_TO_DASHBOARD_SECTION_HELPCENTER"===e.type&&chrome.runtime.sendMessage(e),o({success:!0})})),chrome.runtime.onMessage.addListener(((e,n,o)=>{"BACK_TO_DASHBOARD_SECTION_CARD_DISPLAY"===e.type&&chrome.runtime.sendMessage(e),o({success:!0})})),chrome.runtime.onMessage.addListener(((e,n,o)=>{"BACK_TO_DASHBOARD_SECTION_LIST_DISPLAY"===e.type&&chrome.runtime.sendMessage(e),o({success:!0})})),chrome.runtime.onMessage.addListener(((e,n,o)=>{"DASHBOARD_COLLECTION_FOLDERS"===e.type&&chrome.runtime.sendMessage(e),o({success:!0})})),chrome.runtime.onMessage.addListener(((e,n,o)=>{"DASHBOARD_COLLECTION_ANCESTOR_FOLDERS"===e.type&&chrome.runtime.sendMessage(e),o({success:!0})})),chrome.runtime.onMessage.addListener(((e,n,o)=>{"DASHBOARD_COLLECTION_FOLDERS_BOOKMARKS"===e.type&&chrome.runtime.sendMessage(e),o({success:!0})})),chrome.runtime.onMessage.addListener(((e,n,o)=>{"DASHBOARD_IMAGE_DETAIL"===e.type&&chrome.runtime.sendMessage(e),o({success:!0})})),chrome.runtime.onMessage.addListener(((e,n,o)=>{"DASHBOARD_ARTICLE_DETAIL"===e.type&&chrome.runtime.sendMessage(e),o({success:!0})})),chrome.runtime.onMessage.addListener(((e,n,o)=>{"DASHBOARD_VIDEO_DETAIL"===e.type&&chrome.runtime.sendMessage(e),o({success:!0})})),chrome.runtime.onMessage.addListener(((e,n,o)=>{"ONBOARDING"===e.type&&chrome.runtime.sendMessage(e),o({success:!0})})),chrome.runtime.onMessage.addListener(((e,n,o)=>{"OPEN_IN_NEW_TAB"===e.type&&chrome.runtime.sendMessage(e),o({success:!0})})),chrome.runtime.onMessage.addListener(((e,n,o)=>{"SELECTED_BOOKMARK_PARENT_NAME"===e.type&&chrome.runtime.sendMessage(e),o({success:!0})})),chrome.runtime.onMessage.addListener(((e,n,o)=>{"CHAT_GPT_USED"===e.type&&chrome.runtime.sendMessage(e),o({success:!0})})),chrome.runtime.onMessage.addListener(((e,n,o)=>{"FETCH_STORED_GPT"===e.type&&chrome.runtime.sendMessage(e),o({success:!0})})),chrome.runtime.onMessage.addListener(((e,n,o)=>{"BACK_TO_MAIN_GPT_SECTION"===e.type&&chrome.runtime.sendMessage(e),o({success:!0})})),chrome.runtime.onMessage.addListener(((e,n,o)=>{"BACK_TO__GPT_TRANSLATE_SECTION"===e.type&&chrome.runtime.sendMessage(e),o({success:!0})})),chrome.runtime.onMessage.addListener(((e,n,o)=>{"BACK_TO__GPT_OCR_SECTION"===e.type&&chrome.runtime.sendMessage(e),o({success:!0})})),chrome.runtime.onMessage.addListener(((e,n,o)=>{"GPT_ACTIVE_DETAILS"===e.type&&chrome.runtime.sendMessage(e),o({success:!0})})),chrome.runtime.onMessage.addListener(((e,n,o)=>{"GET_GPT_DATA"===e.type&&chrome.runtime.sendMessage(e),o({success:!0})})),chrome.runtime.onMessage.addListener(((e,n,o)=>{"downloadImage"===e.action&&downloadImage(e.url),o({success:!0})}));let pendingConsent={show:!1,url:""},pendingRecorderModal={show:!1,url:""},pendingAuthConsent={show:!1,url:""},recordingState={isRecording:!1,isPaused:!1,url:"",token:""},recordingTimeout=null,warning2MinutesTimeout=null,warning1MinuteTimeout=null,recordedBlobs=[],offscreenDocumentReady=!1,isOnline=!0,pauseStartTime=null,totalPausedTime=0,isSidebarOpen=!1,activeTabId=null;function isMeetingPlatform(e){return[/meet\.google\.com\/.+/,/zoom\.us\/j\/.+/,/zoom\.us\/wc\/.+/,/app\.zoom\.us\/wc\/.+/,/teams\.microsoft\.com\/l\/meetup-join\/.+/,/teams\.microsoft\.com\/v2\/.+/,/teams\.live\.com\/v2\/.+/].some((n=>n.test(e.toLowerCase())))}async function setupOffscreenDocument(){try{const e="recorder.html";(await chrome.runtime.getContexts({})).some((n=>"OFFSCREEN_DOCUMENT"===n.contextType&&n.documentUrl.endsWith(e)))?console.log("Background: Offscreen document already exists."):(console.log("Background: Creating offscreen document..."),await chrome.offscreen.createDocument({url:e,reasons:["USER_MEDIA"],justification:"Recording audio from tab and microphone"}),console.log("Background: Offscreen document created."))}catch(e){throw console.error("background.js: Error setting up offscreen document:",e),chrome.runtime.sendMessage({type:"RECORDING_ERROR",error:`Failed to create offscreen document: ${e.message}`}),e}}async function sendWarningToContentScript(e){if(activeTabId&&recordingState.isRecording)try{await chrome.tabs.sendMessage(activeTabId,{type:e}),console.log(`background.js: Sent ${e} to content script on tab ${activeTabId}`)}catch(n){console.error(`background.js: Failed to send ${e} to content script:`,n),chrome.tabs.query({url:recordingState.url},(n=>{n[0]&&n[0].id?(activeTabId=n[0].id,console.log(`background.js: Updated activeTabId to ${activeTabId} for URL ${recordingState.url}`),chrome.tabs.sendMessage(activeTabId,{type:e},(()=>{chrome.runtime.lastError?console.error(`background.js: Failed to send ${e} to updated tab ${activeTabId}:`,chrome.runtime.lastError.message):console.log(`background.js: Successfully sent ${e} to updated tab ${activeTabId}`)}))):console.error(`background.js: No valid tab found for URL ${recordingState.url}`)}))}else console.log(`background.js: Cannot send ${e}, activeTabId: ${activeTabId}, isRecording: ${recordingState.isRecording}`)}chrome.runtime.onMessage.addListener((async(e,n,o)=>{switch(console.log("background.js: Received message:",e,"from sender:",n),e.type){case"RECORDER_LOG":console.log(`background.js: Forwarded from recorder.js: ${e.message}`);break;case"MEETING_DETECTED":console.log(`background.js: Meeting detected at: ${e.url}`);break;case"SUMMARY_REQUESTED":console.log(`background.js: Meeting summary requested for: ${e.url}`),pendingConsent={show:!0,url:e.url},chrome.runtime.sendMessage({type:"SHOW_CONSENT_MODAL",url:e.url});break;case"OVERLAY_CLOSED":console.log(`background.js: Overlay closed for: ${e.url}`),pendingConsent={show:!1,url:""},pendingRecorderModal={show:!1,url:""},pendingAuthConsent={show:!1,url:""},recordingState.isRecording||(recordingState={isRecording:!1,isPaused:!1,url:"",token:""},recordedBlobs=[],recordingTimeout&&clearTimeout(recordingTimeout),warning2MinutesTimeout&&clearTimeout(warning2MinutesTimeout),warning1MinuteTimeout&&clearTimeout(warning1MinuteTimeout),recordingTimeout=null,warning2MinutesTimeout=null,warning1MinuteTimeout=null),chrome.runtime.sendMessage({type:"CLOSE_CONSENT_MODAL"}),chrome.runtime.sendMessage({type:"CLOSE_RECORDER_MODAL"}),isSidebarOpen=!1,activeTabId&&(chrome.tabs.sendMessage(activeTabId,{type:"SIDEBAR_STATE",isOpen:!1}),console.log("background.js: Sent SIDEBAR_STATE (closed) to content script"));break;case"CONSENT_CONFIRMED":console.log(`background.js: Consent confirmed for meeting at: ${e.url}`),pendingConsent={show:!1,url:""},chrome.tabs.query({active:!0,currentWindow:!0},(n=>{n[0]&&n[0].url&&n[0].url.includes(e.url)?(console.log(`background.js: Active tab is meeting URL, sending SHOW_RECORDER_MODAL for: ${e.url}`),pendingRecorderModal={show:!0,url:e.url},chrome.runtime.sendMessage({type:"SHOW_RECORDER_MODAL",url:e.url})):(console.log("background.js: Active tab is not meeting URL, clearing pending states"),pendingConsent={show:!1,url:""},pendingRecorderModal={show:!1,url:""},pendingAuthConsent={show:!1,url:""})}));break;case"CONSENT_CANCELLED":console.log(`background.js: Consent cancelled for meeting at: ${e.url}`),pendingConsent={show:!1,url:""},pendingRecorderModal={show:!1,url:""},pendingAuthConsent={show:!1,url:""},recordingState={isRecording:!1,isPaused:!1,url:"",token:""},recordedBlobs=[],recordingTimeout&&clearTimeout(recordingTimeout),warning2MinutesTimeout&&clearTimeout(warning2MinutesTimeout),warning1MinuteTimeout&&clearTimeout(warning1MinuteTimeout),recordingTimeout=null,warning2MinutesTimeout=null,warning1MinuteTimeout=null,chrome.runtime.sendMessage({type:"CLOSE_CONSENT_MODAL"}),chrome.runtime.sendMessage({type:"CLOSE_RECORDER_MODAL"}),isSidebarOpen=!1,activeTabId&&(chrome.tabs.sendMessage(activeTabId,{type:"SIDEBAR_STATE",isOpen:!1}),console.log("background.js: Sent SIDEBAR_STATE (closed) to content script"));break;case"SHOW_CONSENT_MODAL":console.log(`background.js: Received SHOW_CONSENT_MODAL for: ${e.url}`),pendingConsent={show:!0,url:e.url},chrome.tabs.query({active:!0,currentWindow:!0},(n=>{n[0]&&n[0].url&&n[0].url.includes(e.url)?(console.log("background.js: Active tab is meeting URL, forwarding SHOW_CONSENT_MODAL"),chrome.runtime.sendMessage({type:"SHOW_CONSENT_MODAL",url:e.url})):(console.log("background.js: Active tab is not meeting URL, clearing pendingConsent"),pendingConsent={show:!1,url:""})}));break;case"CHECK_MEETING_RECORD":console.log("background.js: Received CHECK_MEETING_RECORD"),chrome.tabs.query({active:!0,currentWindow:!0},(e=>{e[0]&&e[0].url&&isMeetingPlatform(e[0].url)?(console.log(`background.js: Active tab is meeting URL, sending SHOW_CONSENT_MODAL for: ${e[0].url}`),pendingConsent={show:!0,url:e[0].url},chrome.runtime.sendMessage({type:"SHOW_CONSENT_MODAL",url:e[0].url})):console.log("background.js: Active tab is not a meeting URL")}));break;case"PENDING_CONSENT_AUTH":console.log(`background.js: Received PENDING_CONSENT_AUTH for: ${e.url}`),pendingAuthConsent={show:!0,url:e.url};break;case"SIDEBAR_OPENED":console.log("background.js: Received SIDEBAR_OPENED"),isSidebarOpen=!0,activeTabId&&(chrome.tabs.sendMessage(activeTabId,{type:"SIDEBAR_STATE",isOpen:!0}),console.log("background.js: Sent SIDEBAR_STATE (opened) to content script"));break;case"SIDEBAR_CLOSED":console.log("background.js: Received SIDEBAR_CLOSED"),isSidebarOpen=!1,activeTabId&&(chrome.tabs.sendMessage(activeTabId,{type:"SIDEBAR_STATE",isOpen:!1}),console.log("background.js: Sent SIDEBAR_STATE (closed) to content script"));break;case"ACTIVATE_MICROPHONE":chrome.tabs.query({active:!0,currentWindow:!0},(e=>{e[0]?.id&&chrome.tabs.sendMessage(e[0].id,{type:"ACTIVATE_MICROPHONE"})}));break;case"START_RECORDING":{const{tabId:n,url:o,token:r}=e;console.log("Background: START_RECORDING triggered for tab:",n),activeTabId=n;try{recordingState={isRecording:!0,isPaused:!1,url:o,token:r},totalPausedTime=0;const e=Math.floor(Date.now()/1e3);console.log("Background: Calling getMediaStreamId..."),chrome.tabCapture.getMediaStreamId({targetTabId:n},(async n=>{if(chrome.runtime.lastError||!n){const e=chrome.runtime.lastError?.message||"Unknown error getting media stream ID";return console.error("Background: Failed to get media stream ID:",e),chrome.runtime.sendMessage({type:"RECORDING_ERROR",error:e}),activeTabId&&chrome.tabs.sendMessage(activeTabId,{type:"RECORDING_ERROR",error:e}),void(recordingState={isRecording:!1,isPaused:!1,url:"",token:""})}console.log("Background: Received streamId:",n),chrome.tabs.sendMessage(activeTabId,{type:"RECORDING_STARTED"}),console.log("background.js: Sent RECORDING_STARTED to content script"),await setupOffscreenDocument(),console.log("Background: Sending startRecording message to offscreen document..."),chrome.runtime.sendMessage({target:"offscreen",type:"startRecording",data:{streamId:n,duration:18e4,token:r,totalPausedTime}}),chrome.storage.local.set({isMeetingRecording:!0,meetingUrl:o,sessionStartTime:e,totalElapsedTime:0,totalPausedTime:0,showRecorderModal:!0}),recordingTimeout&&clearTimeout(recordingTimeout),recordingTimeout=setTimeout((()=>{chrome.runtime.sendMessage({target:"offscreen",type:"stopRecording"}),console.log("Background: Sent stop signal to offscreen after 3 minutes + paused time."),recordingTimeout=null}),18e4+totalPausedTime),warning2MinutesTimeout&&clearTimeout(warning2MinutesTimeout),warning2MinutesTimeout=setTimeout((()=>{console.log("Background: Sending WARNING_2_MINUTES after 1 minute + paused time"),chrome.runtime.sendMessage({type:"WARNING_2_MINUTES"}),!isSidebarOpen&&activeTabId&&sendWarningToContentScript("WARNING_2_MINUTES"),warning2MinutesTimeout=null}),6e4+totalPausedTime),warning1MinuteTimeout&&clearTimeout(warning1MinuteTimeout),warning1MinuteTimeout=setTimeout((()=>{console.log("Background: Sending WARNING_1_MINUTE after 2 minutes + paused time"),chrome.runtime.sendMessage({type:"WARNING_1_MINUTE"}),!isSidebarOpen&&activeTabId&&sendWarningToContentScript("WARNING_1_MINUTE"),warning1MinuteTimeout=null}),12e4+totalPausedTime)}))}catch(e){console.error("Background: Error in startRecording flow:",e),chrome.runtime.sendMessage({type:"RECORDING_ERROR",error:e.message}),activeTabId&&chrome.tabs.sendMessage(activeTabId,{type:"RECORDING_ERROR",error:e.message}),recordingState={isRecording:!1,isPaused:!1,url:"",token:""},chrome.storage.local.set({isMeetingRecording:!1,meetingUrl:"",sessionStartTime:0,totalElapsedTime:0,totalPausedTime:0}),recordingTimeout&&(clearTimeout(recordingTimeout),recordingTimeout=null),warning2MinutesTimeout&&(clearTimeout(warning2MinutesTimeout),warning2MinutesTimeout=null),warning1MinuteTimeout&&(clearTimeout(warning1MinuteTimeout),warning1MinuteTimeout=null)}break}case"PAUSE_RECORDING":console.log(`background.js: Received PAUSE_RECORDING for: ${e.url}`),recordingState.isRecording&&!recordingState.isPaused&&(recordingState.isPaused=!0,pauseStartTime=Date.now(),console.log("Background: Pause started at:",pauseStartTime),chrome.runtime.sendMessage({target:"offscreen",type:"pauseRecording"}),console.log("Background: Sent pauseRecording to offscreen document."),warning2MinutesTimeout&&(clearTimeout(warning2MinutesTimeout),warning2MinutesTimeout=null,console.log("Background: Cleared warning2MinutesTimeout on pause.")),warning1MinuteTimeout&&(clearTimeout(warning1MinuteTimeout),warning1MinuteTimeout=null,console.log("Background: Cleared warning1MinuteTimeout on pause.")));break;case"RESUME_RECORDING":if(console.log(`background.js: Received RESUME_RECORDING for: ${e.url}`),recordingState.isRecording&&recordingState.isPaused){if(recordingState.isPaused=!1,pauseStartTime){const e=Date.now()-pauseStartTime;totalPausedTime+=e,console.log("Background: Resumed. Paused for:",e,"ms. Total paused time:",totalPausedTime,"ms"),chrome.storage.local.set({totalPausedTime},(()=>{console.log("Background: Updated totalPausedTime in storage:",totalPausedTime)})),recordingTimeout&&clearTimeout(recordingTimeout),recordingTimeout=setTimeout((()=>{chrome.runtime.sendMessage({target:"offscreen",type:"stopRecording"}),console.log("Background: Sent stop signal to offscreen after 3 minutes + paused time."),recordingTimeout=null}),18e4+totalPausedTime),warning2MinutesTimeout&&clearTimeout(warning2MinutesTimeout),warning2MinutesTimeout=setTimeout((()=>{console.log("Background: Sending WARNING_2_MINUTES after 1 minute + paused time"),chrome.runtime.sendMessage({type:"WARNING_2_MINUTES"}),!isSidebarOpen&&activeTabId&&sendWarningToContentScript("WARNING_2_MINUTES"),warning2MinutesTimeout=null}),6e4+totalPausedTime),warning1MinuteTimeout&&clearTimeout(warning1MinuteTimeout),warning1MinuteTimeout=setTimeout((()=>{console.log("Background: Sending WARNING_1_MINUTE after 2 minutes + paused time"),chrome.runtime.sendMessage({type:"WARNING_1_MINUTE"}),!isSidebarOpen&&activeTabId&&sendWarningToContentScript("WARNING_1_MINUTE"),warning1MinuteTimeout=null}),12e4+totalPausedTime),chrome.runtime.sendMessage({target:"offscreen",type:"updateRecordingTimeout",data:{duration:18e4,totalPausedTime}}),console.log("Background: Sent updateRecordingTimeout to offscreen with totalPausedTime:",totalPausedTime)}chrome.runtime.sendMessage({target:"offscreen",type:"resumeRecording"}),console.log("Background: Sent resumeRecording to offscreen document.")}break;case"SAVE_RECORDING":console.log(`background.js: Received SAVE_RECORDING for: ${e.url}`),recordingState.isRecording&&(recordingState={isRecording:!1,isPaused:!1,url:"",token:""},chrome.storage.local.set({isMeetingRecording:!1,meetingUrl:"",sessionStartTime:0,totalElapsedTime:0,totalPausedTime:0}),chrome.runtime.sendMessage({target:"offscreen",type:"stopRecording"}),console.log("Background: Sent stopRecording to offscreen document for save."),recordingTimeout&&clearTimeout(recordingTimeout),warning2MinutesTimeout&&clearTimeout(warning2MinutesTimeout),warning1MinuteTimeout&&clearTimeout(warning1MinuteTimeout),recordingTimeout=null,warning2MinutesTimeout=null,warning1MinuteTimeout=null,activeTabId&&chrome.tabs.sendMessage(activeTabId,{type:"SAVE_RECORDING"}));break;case"downloadRecording":const{base64:n,mimeType:o,filename:r,authToken:t}=e;if(console.log("Background: Received downloadRecording request from offscreen document."),console.log("Background: Base64 string length:",n.length),"string"!=typeof n||0===n.length){const e="Background: Received invalid or empty base64 string.";return console.error(e,n),chrome.runtime.sendMessage({type:"RECORDING_ERROR",error:e}),void(activeTabId&&chrome.tabs.sendMessage(activeTabId,{type:"RECORDING_ERROR",error:e}))}try{const e=Uint8Array.from(atob(n),(e=>e.charCodeAt(0))).buffer;console.log("Background: Converted base64 to ArrayBuffer. Size:",e.byteLength);const s=new Blob([e],{type:o});if(console.log("Background: Reconstructed Blob from ArrayBuffer. Size:",s.size,"Type:",s.type),0===s.size){const e="Background: Reconstructed Blob is empty. No audio data to download.";return console.error(e),chrome.runtime.sendMessage({type:"RECORDING_ERROR",error:e}),void(activeTabId&&chrome.tabs.sendMessage(activeTabId,{type:"RECORDING_ERROR",error:e}))}const i=new FileReader;i.onloadend=async()=>{if(!i.result){const e="Background: FileReader result is null or empty.";return console.error(e),chrome.runtime.sendMessage({type:"RECORDING_ERROR",error:e}),void(activeTabId&&chrome.tabs.sendMessage(activeTabId,{type:"RECORDING_ERROR",error:e}))}{const e=i.result;if(console.log("Background: Converted Blob to Data URL (first 50 chars):",e.substring(0,50)+"..."),!e.startsWith("data:audio/webm")){const e="Background: Invalid data URL format for audio/webm.";return console.error(e),chrome.runtime.sendMessage({type:"RECORDING_ERROR",error:e}),void(activeTabId&&chrome.tabs.sendMessage(activeTabId,{type:"RECORDING_ERROR",error:e}))}try{const n=await chrome.downloads.download({url:e,filename:r,saveAs:!1});console.log("Background: File download initiated. Download ID:",n),chrome.runtime.sendMessage({type:"recordingComplete"}),activeTabId&&chrome.tabs.sendMessage(activeTabId,{type:"recordingComplete"})}catch(e){const n=`Background: Download failed: ${e.message}`;return console.error(n),chrome.runtime.sendMessage({type:"RECORDING_ERROR",error:n}),void(activeTabId&&chrome.tabs.sendMessage(activeTabId,{type:"RECORDING_ERROR",error:n}))}}},i.onerror=e=>{const n=`Background: FileReader error: ${e.target.error.name}`;console.error(n),chrome.runtime.sendMessage({type:"RECORDING_ERROR",error:n}),activeTabId&&chrome.tabs.sendMessage(activeTabId,{type:"RECORDING_ERROR",error:n})},i.readAsDataURL(s),console.log("Background: Preparing to send audio to API...");const a=new FormData;a.append("file",s,r),a.append("title",`Meeting Recording ${(new Date).toISOString().slice(0,19).replace(/[:.]/g,"-")}`);const c=t;try{const e=await fetch("http://localhost:3000/api/meetings/upload",{method:"POST",headers:{Authorization:`Bearer ${c}`},body:a});if(!e.ok){const n=`Background: API request failed with status ${e.status}: ${e.statusText}`;return console.error(n),chrome.runtime.sendMessage({type:"RECORDING_ERROR",error:n}),void(activeTabId&&chrome.tabs.sendMessage(activeTabId,{type:"RECORDING_ERROR",error:n}))}const n=await e.json();console.log("Background: API response:",n),chrome.runtime.sendMessage({type:"uploadComplete"}),chrome.storage.local.set({isMeetingRecording:!1,meetingUrl:"",sessionStartTime:0,totalElapsedTime:0})}catch(e){const n=`Background: API request error: ${e.message}`;console.error(n),chrome.runtime.sendMessage({type:"RECORDING_ERROR",error:n}),activeTabId&&chrome.tabs.sendMessage(activeTabId,{type:"RECORDING_ERROR",error:n})}}catch(e){const n=`Background: Error during download or API setup: ${e.message}`;console.error(n),chrome.runtime.sendMessage({type:"RECORDING_ERROR",error:n}),activeTabId&&chrome.tabs.sendMessage(activeTabId,{type:"RECORDING_ERROR",error:n})}break;case"recordingComplete":recordingTimeout&&(clearTimeout(recordingTimeout),recordingTimeout=null),warning2MinutesTimeout&&(clearTimeout(warning2MinutesTimeout),warning2MinutesTimeout=null),warning1MinuteTimeout&&(clearTimeout(warning1MinuteTimeout),warning1MinuteTimeout=null),chrome.storage.local.set({isMeetingRecording:!1,meetingUrl:"",sessionStartTime:0,totalElapsedTime:0,totalPausedTime:0}),chrome.runtime.sendMessage({type:"recordingComplete"}),activeTabId&&chrome.tabs.sendMessage(activeTabId,{type:"recordingComplete"});break;case"RECORDING_ERROR":console.log(`background.js: Received RECORDING_ERROR: ${e.error}`),recordingState={isRecording:!1,isPaused:!1,url:"",token:""},chrome.storage.local.set({isMeetingRecording:!1,meetingUrl:"",sessionStartTime:0,totalElapsedTime:0,totalPausedTime:0}),recordedBlobs=[],recordingTimeout&&clearTimeout(recordingTimeout),warning2MinutesTimeout&&clearTimeout(warning2MinutesTimeout),warning1MinuteTimeout&&clearTimeout(warning1MinuteTimeout),recordingTimeout=null,warning2MinutesTimeout=null,warning1MinuteTimeout=null,chrome.runtime.sendMessage({type:"RECORDING_ERROR",error:e.error}),activeTabId&&chrome.tabs.sendMessage(activeTabId,{type:"RECORDING_ERROR",error:e.error});break;case"SIDEBAR_READY":console.log("background.js: Received SIDEBAR_READY"),isSidebarOpen=!0,chrome.tabs.query({active:!0,currentWindow:!0},(e=>{if(e[0]&&e[0].url){activeTabId=e[0].id;const n=isMeetingPlatform(e[0].url);console.log(`background.js: Sending TAB_UPDATED for: ${e[0].url}, isMeeting: ${n}`),chrome.runtime.sendMessage({type:"TAB_UPDATED",url:e[0].url,isMeeting:n}),activeTabId&&(chrome.tabs.sendMessage(activeTabId,{type:"SIDEBAR_STATE",isOpen:!0}),console.log("background.js: Sent SIDEBAR_STATE (opened) to content script")),pendingConsent.show&&e[0].url.includes(pendingConsent.url)?(console.log(`background.js: Active tab is meeting URL, sending SHOW_CONSENT_MODAL for: ${pendingConsent.url}`),chrome.runtime.sendMessage({type:"SHOW_CONSENT_MODAL",url:pendingConsent.url})):pendingConsent.show&&(console.log("background.js: Active tab is not meeting URL, clearing pendingConsent"),pendingConsent={show:!1,url:""}),pendingRecorderModal.show&&e[0].url.includes(pendingRecorderModal.url)?(console.log(`background.js: Active tab is meeting URL, sending SHOW_RECORDER_MODAL for: ${pendingRecorderModal.url}`),chrome.runtime.sendMessage({type:"SHOW_RECORDER_MODAL",url:pendingRecorderModal.url})):pendingRecorderModal.show&&(console.log("background.js: Active tab is not meeting URL, clearing pendingRecorderModal"),pendingRecorderModal={show:!1,url:""})}}));break;case"AUTH_SUCCESS":console.log("background.js: Received AUTH_SUCCESS"),pendingAuthConsent.show&&chrome.tabs.query({active:!0,currentWindow:!0},(e=>{e[0]&&e[0].url&&e[0].url.includes(pendingAuthConsent.url)?(console.log(`background.js: Active tab is meeting URL, sending SHOW_RECORDER_MODAL for: ${pendingAuthConsent.url}`),pendingRecorderModal={show:!0,url:pendingAuthConsent.url},pendingAuthConsent={show:!1,url:""},chrome.runtime.sendMessage({type:"SHOW_RECORDER_MODAL",url:pendingRecorderModal.url})):(console.log("background.js: Active tab is not meeting URL, clearing pendingAuthConsent"),pendingAuthConsent={show:!1,url:""})}))}return!0})),chrome.tabs.onActivated.addListener((e=>{console.log(`background.js: Tab activated: ${e.tabId}`),activeTabId=e.tabId,chrome.tabs.query({active:!0,currentWindow:!0},(e=>{if(e[0]&&e[0].url){const n=isMeetingPlatform(e[0].url);console.log(`background.js: Sending TAB_UPDATED for: ${e[0].url}, isMeeting: ${n}`),chrome.runtime.sendMessage({type:"TAB_UPDATED",url:e[0].url,isMeeting:n}),activeTabId&&(chrome.tabs.sendMessage(activeTabId,{type:"SIDEBAR_STATE",isOpen:isSidebarOpen}),console.log("background.js: Sent SIDEBAR_STATE to content script on tab activation"))}!pendingConsent.show||e[0]&&e[0].url&&e[0].url.includes(pendingConsent.url)||(console.log("background.js: Active tab changed, no longer meeting URL, sending CLOSE_CONSENT_MODAL"),pendingConsent={show:!1,url:""},chrome.runtime.sendMessage({type:"CLOSE_CONSENT_MODAL"})),!pendingRecorderModal.show||e[0]&&e[0].url&&e[0].url.includes(pendingRecorderModal.url)||(console.log("background.js: Active tab changed, no longer meeting URL, sending CLOSE_RECORDER_MODAL"),recordingState.isRecording&&recordedBlobs.length>0&&new Blob(recordedBlobs,{type:"audio/webm;codecs=opus"}).size>1024&&(console.log("background.js: Recording >1KB on tab change, stopping and uploading"),chrome.runtime.sendMessage({target:"offscreen",type:"stopRecording"})),recordingState={isRecording:!1,isPaused:!1,url:"",token:""},pendingRecorderModal={show:!1,url:""},recordingTimeout&&clearTimeout(recordingTimeout),warning2MinutesTimeout&&clearTimeout(warning2MinutesTimeout),warning1MinuteTimeout&&clearTimeout(warning1MinuteTimeout),recordingTimeout=null,warning2MinutesTimeout=null,warning1MinuteTimeout=null,chrome.runtime.sendMessage({type:"CLOSE_RECORDER_MODAL"}),isSidebarOpen=!1,activeTabId&&(chrome.tabs.sendMessage(activeTabId,{type:"SIDEBAR_STATE",isOpen:!1}),console.log("background.js: Sent SIDEBAR_STATE (closed) to content script"))),!pendingAuthConsent.show||e[0]&&e[0].url&&e[0].url.includes(pendingAuthConsent.url)||(console.log("background.js: Active tab changed, no longer meeting URL, clearing pendingAuthConsent"),pendingAuthConsent={show:!1,url:""})}))})),chrome.tabs.onUpdated.addListener(((e,n,o)=>{if(o.url&&n.url){const e=isMeetingPlatform(o.url);console.log(`background.js: Sending TAB_UPDATED for: ${o.url}, isMeeting: ${e}`),chrome.runtime.sendMessage({type:"TAB_UPDATED",url:o.url,isMeeting:e})}pendingConsent.show&&n.url&&o.url&&!o.url.includes(pendingConsent.url)&&(console.log("background.js: Meeting tab URL changed, sending CLOSE_CONSENT_MODAL"),pendingConsent={show:!1,url:""},chrome.runtime.sendMessage({type:"CLOSE_CONSENT_MODAL"})),pendingRecorderModal.show&&n.url&&o.url&&!o.url.includes(pendingRecorderModal.url)&&(console.log("background.js: Meeting tab URL changed, sending CLOSE_RECORDER_MODAL"),recordingState.isRecording&&recordedBlobs.length>0&&new Blob(recordedBlobs,{type:"audio/webm;codecs=opus"}).size>1024&&(console.log("background.js: Recording >1KB on tab URL change, stopping and uploading"),chrome.runtime.sendMessage({target:"offscreen",type:"stopRecording"})),recordingState={isRecording:!1,isPaused:!1,url:"",token:""},pendingRecorderModal={show:!1,url:""},recordingTimeout&&clearTimeout(recordingTimeout),warning2MinutesTimeout&&clearTimeout(warning2MinutesTimeout),warning1MinuteTimeout&&clearTimeout(warning1MinuteTimeout),recordingTimeout=null,warning2MinutesTimeout=null,warning1MinuteTimeout=null,chrome.runtime.sendMessage({type:"CLOSE_RECORDER_MODAL"}),isSidebarOpen=!1,activeTabId&&(chrome.tabs.sendMessage(activeTabId,{type:"SIDEBAR_STATE",isOpen:!1}),console.log("background.js: Sent SIDEBAR_STATE (closed) to content script"))),pendingAuthConsent.show&&n.url&&o.url&&!o.url.includes(pendingAuthConsent.url)&&(console.log("background.js: Meeting tab URL changed, clearing pendingAuthConsent"),pendingAuthConsent={show:!1,url:""})})),chrome.tabs.onRemoved.addListener(((e,n)=>{pendingConsent.show&&chrome.tabs.query({},(e=>{e.find((e=>e.url&&e.url.includes(pendingConsent.url)))||(console.log("background.js: Meeting tab closed, sending CLOSE_CONSENT_MODAL"),pendingConsent={show:!1,url:""},chrome.runtime.sendMessage({type:"CLOSE_CONSENT_MODAL"}))})),pendingRecorderModal.show&&chrome.tabs.query({},(e=>{e.find((e=>e.url&&e.url.includes(pendingRecorderModal.url)))||(console.log("background.js: Meeting tab closed, sending CLOSE_RECORDER_MODAL"),recordingState.isRecording&&recordedBlobs.length>0&&new Blob(recordedBlobs,{type:"audio/webm;codecs=opus"}).size>1024&&(console.log("background.js: Recording >1KB on tab close, stopping and uploading"),chrome.runtime.sendMessage({target:"offscreen",type:"stopRecording"})),recordingState={isRecording:!1,isPaused:!1,url:"",token:""},pendingRecorderModal={show:!1,url:""},recordingTimeout&&clearTimeout(recordingTimeout),warning2MinutesTimeout&&clearTimeout(warning2MinutesTimeout),warning1MinuteTimeout&&clearTimeout(warning1MinuteTimeout),recordingTimeout=null,warning2MinutesTimeout=null,warning1MinuteTimeout=null,chrome.runtime.sendMessage({type:"CLOSE_RECORDER_MODAL"}),isSidebarOpen=!1,activeTabId&&(chrome.tabs.sendMessage(activeTabId,{type:"SIDEBAR_STATE",isOpen:!1}),console.log("background.js: Sent SIDEBAR_STATE (closed) to content script")))})),pendingAuthConsent.show&&chrome.tabs.query({},(e=>{e.find((e=>e.url&&e.url.includes(pendingAuthConsent.url)))||(console.log("background.js: Meeting tab closed, clearing pendingAuthConsent"),pendingAuthConsent={show:!1,url:""})}))})),setInterval((()=>{chrome.tabs.query({active:!0,currentWindow:!0},(e=>{e[0]&&e[0].id&&e[0].url&&isMeetingPlatform(e[0].url)?(activeTabId=e[0].id,chrome.tabs.sendMessage(e[0].id,{type:"CHECK_MEETING"},(e=>{chrome.runtime.lastError?console.error(`background.js: Failed to send CHECK_MEETING: ${chrome.runtime.lastError.message}`):console.log("background.js: CHECK_MEETING response:",e)}))):console.log("background.js: No valid meeting tab for CHECK_MEETING")}))}),3e4);